<?php

namespace App\Http\Controllers;

use App\Models\Prescription;
use App\Models\Doctor;
use App\Models\Patient;
use App\Models\Medicine;
use App\Models\Test;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PrescriptionController extends Controller
{
    public function index()
    {
         $patients = \App\Models\Patient::with(['doctor'])   // keep your doctor relation
            ->withCount('prescriptions')                    // adds prescriptions_count
            ->orderBy('name')                               // optional: or orderByDesc('prescriptions_count')
            ->paginate(10);                                 // or ->get() if you don't paginate

        $prescriptions = Prescription::with(['doctor','patient'])->latest()->paginate(15);

        return view('admin.prescriptions.index', compact('prescriptions','patients'));
    }


//     public function index()
// {
//     $patients = \App\Models\Patient::with(['doctor'])   // keep your doctor relation
//         ->withCount('prescriptions')                    // adds prescriptions_count
//         ->orderBy('name')                               // optional: or orderByDesc('prescriptions_count')
//         ->paginate(10);                                 // or ->get() if you don't paginate

//     return view('patients.index', compact('patients'));
// }


    public function create()
    {
        // Keep your current fetching logic (change to ->orderBy(...) if you prefer)
        $patients  = Patient::all();
        $doctors   = Doctor::all();
        $medicines = Medicine::all();
        $tests     = Test::all();

        return view('admin.prescriptions.create', compact('patients', 'doctors', 'medicines', 'tests'));
    }

    public function store(Request $request)
    {
        // Validate base + clinical fields
        $request->validate([
            'doctor_id'           => ['required', 'exists:doctors,id'],
            'patient_id'          => ['nullable'], // "__new" or existing id
            'problem_description' => ['nullable', 'string'],
            'doctor_advice'       => ['nullable', 'string'],
            'return_date'         => ['nullable','date'],

            // Clinical findings
            'oe'               => ['nullable', 'string'],
            'bp'               => ['nullable', 'string', 'max:50'],
            'pulse'            => ['nullable', 'integer', 'min:0', 'max:300'],
            'temperature_c'    => ['nullable', 'numeric', 'min:20', 'max:45'],
            'spo2'             => ['nullable', 'integer', 'min:0', 'max:100'],
            'respiratory_rate' => ['nullable', 'integer', 'min:0', 'max:80'],
            'weight_kg'        => ['nullable', 'numeric', 'min:0', 'max:500'],
            'height_cm'        => ['nullable', 'numeric', 'min:0', 'max:300'],
            'bmi'              => ['nullable', 'numeric', 'min:0', 'max:200'],

            // New patient (if used)
            'new_patient.name'  => ['nullable', 'string', 'max:255'],
            'new_patient.phone' => ['nullable', 'string', 'max:50'],
            'new_patient.email' => ['nullable', 'email', 'max:255'],
            'new_patient.notes' => ['nullable', 'string'],
        ]);

        return DB::transaction(function () use ($request) {
            // Patient handling
            $patientId = $request->input('patient_id');
            if ($patientId === '__new') {
                $new = $request->input('new_patient', []);
                if (empty($new['name'])) {
                    return back()->withInput()
                        ->withErrors(['patient_id' => 'Please provide a name for the new patient.']);
                }
                $patient = Patient::create([
                    'name'  => $new['name'],
                    'phone' => $new['phone'] ?? null,
                    'email' => $new['email'] ?? null,
                    'notes' => $new['notes'] ?? null,
                ]);
                $patientId = $patient->id;
            }

            // Prepare data for create()
            $data = $request->only([
                'doctor_id',
                'problem_description',
                'doctor_advice',
                'return_date',
                'oe',
                'bp',
                'pulse',
                'temperature_c',
                'spo2',
                'respiratory_rate',
                'weight_kg',
                'height_cm',
                'bmi',
            ]);
            $data['patient_id'] = $patientId ?: null;

            // Compute BMI server-side (overrides frontend value if both available)
            $data['bmi'] = $this->computeBmi($data['weight_kg'] ?? null, $data['height_cm'] ?? null, $data['bmi'] ?? null);

            // Create the prescription
            $prescription = Prescription::create($data);

            // Attach medicines with pivot fields (duration, times_per_day)
            $medPivot = $this->extractMedicinePivot($request->input('medicines', []));
            if (!empty($medPivot)) {
                $prescription->medicines()->attach($medPivot);
            }

            // Attach tests
            $testIds = array_filter((array) $request->input('tests', []), fn($v) => !empty($v));
            if (!empty($testIds)) {
                $prescription->tests()->attach($testIds);
            }

            // Redirect: to show or index as you prefer
            return redirect()
                ->route('prescriptions.show', $prescription->id)
                ->with('success', 'Prescription created successfully!');
        });
    }

    public function show(Prescription $prescription)
    {
        // Include pivot for medicines
        $prescription->load(['doctor','patient','medicines','tests']);
        return view('admin.prescriptions.show', compact('prescription'));
    }

  

    public function destroy(Prescription $prescription)
    {
        $prescription->delete();
        return redirect()->route('prescriptions.index')->with('success','Prescription deleted.');
    }

    public function searchTests(Request $request)
    {
        $query = $request->get('q', '');
        $tests = Test::where('name', 'LIKE', "%{$query}%")
            ->select('id', 'name', 'price', 'note')
            ->get();

        return response()->json($tests);
    }

    // ----------------- Helpers -----------------

    /**
     * Build [id => ['duration'=>..., 'times_per_day'=>...], ...] for attach/sync
     */
    // private function extractMedicinePivot(array $medicines): array
    // {
    //     $out = [];
    //     foreach ($medicines as $id => $row) {
    //         if (!isset($row['selected']) || !$row['selected']) continue;
    //         $out[(int) $id] = [
    //             'duration'      => $row['duration']      ?? null,
    //             'times_per_day' => $row['times_per_day'] ?? null,
    //             'created_at'    => now(),
    //             'updated_at'    => now(),
    //         ];
    //     }
    //     return $out;
    //     // If your pivot timestamps are not needed, you can remove created_at/updated_at here.
    // }

    private function extractMedicinePivot(array $medicines): array
    {
        $out = [];
        foreach ($medicines as $id => $row) {
            if (!isset($row['selected']) || !$row['selected']) continue;
            $out[(int) $id] = [
                'duration'      => $row['duration']      ?? null,
                'times_per_day' => $row['times_per_day'] ?? null,
                'created_at'    => now(),
                'updated_at'    => now(),
            ];
        }
        return $out;
    }

    /**
     * Compute BMI from weight (kg) and height (cm). Fallback to provided value if not computable.
     */
    private function computeBmi($weightKg, $heightCm, $fallback = null)
    {
        $w = is_numeric($weightKg) ? (float) $weightKg : null;
        $h = is_numeric($heightCm) ? (float) $heightCm : null;

        if ($w && $h && $h > 0) {
            $hm = $h / 100.0;
            $bmi = $w / ($hm * $hm);
            return round($bmi, 1);
        }
        return is_numeric($fallback) ? round((float) $fallback, 1) : null;
    }

    

    public function edit(Prescription $prescription)
    {
        $prescription->load(['doctor','patient','medicines','tests']); // include pivots
        $patients  = Patient::orderBy('name')->get();
        $doctors   = Doctor::orderBy('name')->get();
        $medicines = Medicine::orderBy('name')->get();
        $tests     = Test::orderBy('name')->get();

        // For quick lookups in Blade
        $selectedMedicinePivot = $prescription->medicines->keyBy('id'); // each has ->pivot
        $selectedTestIds = $prescription->tests->pluck('id')->toArray();

        return view('admin.prescriptions.edit', compact(
            'prescription','patients','doctors','medicines','tests','selectedMedicinePivot','selectedTestIds'
        ));
    }

    public function update(Request $request, Prescription $prescription)
    {
        // Validation (same as store)
        $request->validate([
            'doctor_id'           => ['required','exists:doctors,id'],
            'patient_id'          => ['nullable'], // or exists:patients,id
            'problem_description' => ['nullable','string'],
            'doctor_advice'       => ['nullable','string'],

            // Clinical
            'oe'               => ['nullable','string'],
            'bp'               => ['nullable','string','max:50'],
            'pulse'            => ['nullable','integer','min:0','max:300'],
            'temperature_c'    => ['nullable','numeric','min:20','max:45'],
            'spo2'             => ['nullable','integer','min:0','max:100'],
            'respiratory_rate' => ['nullable','integer','min:0','max:80'],
            'weight_kg'        => ['nullable','numeric','min:0','max:500'],
            'height_cm'        => ['nullable','numeric','min:0','max:300'],
            'bmi'              => ['nullable','numeric','min:0','max:200'],

            // Optional new patient on edit (only if you support it)
            'new_patient.name'  => ['nullable','string','max:255'],
            'new_patient.phone' => ['nullable','string','max:50'],
            'new_patient.email' => ['nullable','email','max:255'],
            'new_patient.notes' => ['nullable','string'],
        ]);

        return DB::transaction(function () use ($request, $prescription) {
            // Patient switch: existing or new
            $patientId = $request->input('patient_id');
            if ($patientId === '__new') {
                $new = $request->input('new_patient', []);
                if (empty($new['name'])) {
                    return back()->withInput()->withErrors(['patient_id' => 'Please provide a name for the new patient.']);
                }
                $patient = Patient::create([
                    'name'  => $new['name'],
                    'phone' => $new['phone'] ?? null,
                    'email' => $new['email'] ?? null,
                    'notes' => $new['notes'] ?? null,
                ]);
                $patientId = $patient->id;
            }

            // Core fields
            $data = $request->only([
                'doctor_id','problem_description','doctor_advice',
                'oe','bp','pulse','temperature_c','spo2','respiratory_rate','weight_kg','height_cm','bmi',
            ]);
            $data['patient_id'] = $patientId ?: $prescription->patient_id;

            // Server-side BMI
            $data['bmi'] = $this->computeBmi($data['weight_kg'] ?? null, $data['height_cm'] ?? null, $data['bmi'] ?? null);

            $prescription->update($data);

            // Medicines pivot sync
            $medPivot = $this->extractMedicinePivot($request->input('medicines', []));
            $prescription->medicines()->sync($medPivot); // [id => ['duration'=>..., 'times_per_day'=>...]]

            // Tests pivot sync
            $testIds = array_filter((array) $request->input('tests', []), fn($v) => !empty($v));
            $prescription->tests()->sync($testIds);

            return redirect()
                ->route('prescriptions.show', $prescription)
                ->with('success', 'Prescription updated successfully.');
        });
    }

     // JSON: all prescriptions for a given patient (modal)
    public function byPatient(Patient $patient)
    {
        // If you don’t have a doctor relation on Prescription, remove ->with('doctor') and doctor column in JSON
        $prescriptions = Prescription::with(['doctor']) 
            ->where('patient_id', $patient->id)
            ->orderByDesc('created_at')
            ->get(['id','doctor_id','created_at']);

        // Build safe links to 'prescriptions.show'
        $data = $prescriptions->map(function ($p) {
            return [
                'id'       => $p->id,
                'date'     => optional($p->created_at)->format('d M Y, h:i A'),
                'doctor'   => optional($p->doctor)->name ?? '—',
                'show_url' => route('prescriptions.show', ['prescription' => $p->id]),
            ];
        });

        return response()->json([
            'patient' => ['id' => $patient->id, 'name' => $patient->name],
            'count'   => $data->count(),
            'data'    => $data,
        ]);
    }

    // Regular show page (make sure it exists)
    // public function show(Prescription $prescription)
    // {
    //     // load what your blade needs
    //     $prescription->load(['patient','doctor']); // adjust relations to your app
    //     return view('prescriptions.show', compact('prescription'));
    // }

}
